version: '3'

services:
  product-service-api:
    container_name: product-service-api
    build:
      context: ./product.service
      dockerfile: ./docker/Dockerfile
    ports:
      - "8080:8091"
    env_file:
      - ./product.service/.env
    networks:
      - product-service-api-network
    depends_on:
      - product-service-api-mongodb

  product-service-api-mongodb:
    container_name: product-service-api-mongodb
    image: mongo:6
    environment:
      - MONGO_INITDB_DATABASE=productdb
      - MONGO_INITDB_ROOT_USERNAME=randomUser
      - MONGO_INITDB_ROOT_PASSWORD=randomPassword
    expose:
      - "27017"
    ports:
      - "27017:27017"
    volumes:
      - product_service_api_mongo:/data/db
    networks:
      - product-service-api-network

  user-service-api:
    container_name: user-service-api
    build:
      context: ./user.service
      dockerfile: ./docker/Dockerfile
    ports:
      - "8081:8080"
    env_file:
      - ./user.service/.env
    networks:
      - product-service-api-network
    depends_on:
      - user-service-postgres

  user-service-postgres:
    container_name: user-service-postgres
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user-service
      PGDATA: /data/postgres
    ports:
      - "5432:5432"
    volumes:
      - user_service_api_postgres:/data/postgres
      - ./user.service/docker/schema.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - product-service-api-network

  other-service-api:
    container_name: other-service-api
    build:
      context: ./other-service
      dockerfile: ./docker/Dockerfile
    ports:
      - "8083:8083"
    env_file:
      - ./other-service/.env
    networks:
      - product-service-api-network
    depends_on:
      - other-service-api-mysql

  other-service-api-mysql:
    image: mysql:8.0.30
    container_name: other-service-api-mysql
    ports:
      - "3306:3306"
    volumes:
      - other_service_api_mysql:/var/lib/mysql
      - ./other-service/docker:/docker-entrypoint-initdb.d
    environment:
      - MYSQL_DATABASE=other
      - MYSQL_ROOT_PASSWORD=root
    networks:
      - product-service-api-network

  rabbitmq-api:
    container_name: rabbitmq-api
    build:
      context: ./rabbitmq.api
      dockerfile: ./docker/Dockerfile
    ports:
      - "8084:8084"
    env_file:
      - ./rabbitmq.api/.env
    networks:
      - product-service-api-network
    depends_on:
      - rabbitmq

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq-one
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_log:/var/log/rabbitmq
    networks:
      - product-service-api-network

networks:
  product-service-api-network:
    driver: bridge

volumes:
  product_service_api_mongo:
    driver: local
  user_service_api_postgres:
    driver: local
  other_service_api_mysql:
    driver: local
  rabbitmq_log:
    driver: local
  rabbitmq_data:
    driver: local
